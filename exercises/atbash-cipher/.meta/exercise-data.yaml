exercise: AtbashCipher
plan: 15
subs: encode_atbash decode_atbash
tests: |-
  for my $case (@test_cases) {
    is(
      $case->{property} eq 'encode'
        ? encode_atbash($case->{input}{phrase})
        : decode_atbash($case->{input}{phrase}),
      $case->{expected},
      $case->{description}
    );
  }

example: |-
  use List::Util qw<pairvalues>;

  my %dict;
  @dict{'a'..'z'} = reverse('a'..'z');

  sub encode_atbash {
    join( ' ', pairvalues split( /(\w{1,5})/, decode_atbash(@_) ) );
  }

  sub decode_atbash {
    join '', map { /\d/ ? $_ : $dict{$_} } split( //, lc $_[0] =~ s/\W//gr );
  }

stub: |-
  sub encode_atbash {
    my ($phrase) = @_;
    return undef;
  }

  sub decode_atbash {
    my ($phrase) = @_;
    return undef;
  }
