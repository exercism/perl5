exercise: NucleotideCount
plan: 6
subs: count_nucleotides
tests: |-
  my @exception_cases;
  foreach my $case (map {@{$_->{cases}}} @{$C_DATA->{cases}}) {
    if ($case->{expected}{error}) {
      push @exception_cases, $case;
    }
    else {
      is_deeply count_nucleotides($case->{input}{strand}), $case->{expected}, $case->{description};
    }
  }

  SKIP: {
    if ( eval { require Test2::Tools::Exception } ) {
      ok(
        Test2::Tools::Exception::dies( sub { count_nucleotides $_->{input}{strand} } ),
        $_->{description}
      ) foreach @exception_cases;
    }
    else {
      skip 'Test2::Tools::Exception not loaded', scalar @exception_cases;
    }
  }

example: |-
  sub count_nucleotides {
    my ($strand) = @_;
    die 'Invalid nucleotide in strand' if $strand =~ /[^ACGT]/;
    my %count = qw(A 0 C 0 G 0 T 0);
    map {$count{$_}++} split(//, $strand);
    return \%count;
  }

stub: |-
  sub count_nucleotides {
    my ($strand) = @_;
    return undef;
  }
