exercise: Grains
plan: 12
subs: grains_on_square total_grains
modules:
tests: |-

  for my $case ( map @{ $_->{cases} // [$_] }, @{ $C_DATA->{cases} } ) {
    if ( ref $case->{expected} ) {
      like dies( sub { grains_on_square($case->{input}{square}) } ),
      qr/$case->{expected}{error}/,
      $case->{description}
    }
    elsif ( $case->{property} eq 'square' ) {
      is(
        grains_on_square($case->{input}{square}),
        $case->{expected},
        'square no. ' . $case->{description}
      );
    }
    elsif ( $case->{property} eq 'total' ) {
      is(
        total_grains(),
        $case->{expected},
        $case->{description}
      );
    }
  }

example: |-
  use bignum;
  use List::Util qw(sum);

  sub grains_on_square {
    my ($square) = @_;
    if ($square < 1 || $square > 64) {
      die 'square must be between 1 and 64';
    }
    return 2 ** ($square - 1);
  }

  sub total_grains {
    return sum map {grains_on_square($_)} 1..64;
  }

stub: |-
  sub grains_on_square {
    my ($square) = @_;
    return undef;
  }

  sub total_grains {
    return undef;
  }
