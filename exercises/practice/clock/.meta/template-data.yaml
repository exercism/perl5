methods: new time add_minutes subtract_minutes
tests: |
  my $todo;
properties:
  create:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->time,
          %s,
          %s,
      );
      END
  add:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute value>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->add_minutes( %s )->time,
          %s,
          %s,
      );
      END
  subtract:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute value>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->subtract_minutes( %s )->time,
          %s,
          %s,
      );
      END
  equal:
    test: |-
      use Data::Dmp;
      q{$todo = todo 'experimental feature' if Clock->new( hour => 0, minute => 0) =~ /OBJECT/;} . "\n" .
      ($case->{expected} ? 'is' : 'isnt') . sprintf(<<'END', (map {@{$_}{qw<hour minute>}} @{$case->{input}}{qw<clock1 clock2>} ), dmp($case->{description}));
      (
          Clock->new( hour => %s, minute => %s ),
          Clock->new( hour => %s, minute => %s ),
          %s,
      );
      $todo = undef;
      END

moo: true

stub: |-
  # rwp = read-write protected
  has hour   => ( is => 'rwp' );
  has minute => ( is => 'rwp' );

  sub time {
    my ($self) = @_;
    return undef;
  }

  sub add_minutes {
    my ($self, $amount) = @_;
    return $self;
  }

  sub subtract_minutes {
    my ($self, $amount) = @_;
    return $self;
  }

example: |-
  use POSIX ();

  has [qw(hour minute)] => (
    is => 'rwp',
    default => 0,
  );

  sub time {
    my ($self) = @_;
    return sprintf '%02d:%02d', $self->hour, $self->minute;
  }

  sub add_minutes {
    my ($self, $amount) = @_;
    $self->_set_minute($self->minute + $amount);
    return $self->BUILD;
  }

  sub subtract_minutes {
    my ($self, $amount) = @_;
    return $self->add_minutes(-$amount);
  }

  sub BUILD {
    my ($self) = @_;
    $self->_set_hour( ( $self->hour + POSIX::floor($self->minute / 60) ) % 24 );
    $self->_set_minute( $self->minute % 60 );
    return $self;
  }
