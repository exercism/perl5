properties:
  create:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->time,
          %s,
          %s,
      );
      END
  add:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute value>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->add_minutes( %s )->time,
          %s,
          %s,
      );
      END
  subtract:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', @{$case->{input}}{qw<hour minute value>}, map {dmp($_)} @{$case}{qw<expected description>});
      is(
          Clock->new( hour => %s, minute => %s )->subtract_minutes( %s )->time,
          %s,
          %s,
      );
      END

class: true

stub: |-
  field $hour   :reader :param;
  field $minute :reader :param;

  method time () {
    return undef;
  }

  method add_minutes ($amount) {
    return $self;
  }

  method subtract_minutes ($amount) {
    return $self;
  }

example: |-
  use POSIX qw<floor>;

  field $hour   :reader :param = 0;
  field $minute :reader :param = 0;

  method time () {
      return sprintf '%02d:%02d', $hour, $minute;
  }

  method add_minutes ($amount) {
      return $self->_set_time( $hour * 60 + $minute + $amount );
  }

  method subtract_minutes ($amount) {
      return $self->add_minutes( -$amount );
  }

  ADJUST {
      $self->_set_time( $hour * 60 + $minute );
  }

  method _set_time ($amount) {
      $hour   = floor( $amount / 60 ) % 24;
      $minute = $amount % 60;
      return $self;
  }
