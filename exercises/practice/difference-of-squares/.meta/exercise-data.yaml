subs: square_of_sum sum_of_squares difference_of_squares
properties:
  differenceOfSquares:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', $case->{input}{number}, $case->{expected}, dmp($case->{description}));
      is(
          difference_of_squares(%s),
          number(%s),
          %s,
      );
      END
  sumOfSquares:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', $case->{input}{number}, $case->{expected}, dmp($case->{description}));
      is(
          sum_of_squares(%s),
          number(%s),
          %s,
      );
      END
  squareOfSum:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', $case->{input}{number}, $case->{expected}, dmp($case->{description}));
      is(
          square_of_sum(%s),
          number(%s),
          %s,
      );
      END

example: |-
  use List::Util qw<sum>;

  sub square_of_sum {
    my ($number) = @_;
    return sum(1..$number) ** 2;
  }

  sub sum_of_squares {
    my ($number) = @_;
    return sum(map {$_ ** 2} 1..$number);
  }

  sub difference_of_squares {
    my ($number) = @_;
    return square_of_sum($number) - sum_of_squares($number);
  }

stub: |-
  sub square_of_sum {
    my ($number) = @_;
    return undef;
  }

  sub sum_of_squares {
    my ($number) = @_;
    return undef;
  }

  sub difference_of_squares {
    my ($number) = @_;
    return undef;
  }
