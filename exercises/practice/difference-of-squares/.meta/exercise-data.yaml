subs: square_of_sum sum_of_squares difference_of_squares
tests: |-
  for my $case (@test_cases) {
    my $func;
    if ( $case->{property} eq 'squareOfSum' ) {
      $func = \&square_of_sum;
    }
    elsif ( $case->{property} eq 'sumOfSquares' ) {
      $func = \&sum_of_squares;
    }
    elsif ( $case->{property} eq 'differenceOfSquares' ) {
      $func = \&difference_of_squares;
    }

    is(
      $func->($case->{input}{number}),
      $case->{expected},
      $case->{description},
    );
  }

example: |-
  use lib 'lib';
  use Exercism::QuickSolve;

  sub square_of_sum {
    my ($number) = @_;

    quicksolve(
      input => $number,
      input_key => 'number',
      property => 'squareOfSum',
    );
  }

  sub sum_of_squares {
    my ($number) = @_;

    quicksolve(
      input => $number,
      input_key => 'number',
      property => 'sumOfSquares',
    );
  }

  sub difference_of_squares {
    my ($number) = @_;

    quicksolve(
      input     => $number,
      input_key => 'number',
      property  => 'differenceOfSquares',
    );
  }

stub: |-
  sub square_of_sum {
    my ($number) = @_;
    return undef;
  }

  sub sum_of_squares {
    my ($number) = @_;
    return undef;
  }

  sub difference_of_squares {
    my ($number) = @_;
    return undef;
  }
