subs: slices

properties:
  slices:
    test: |-
      use Data::Dmp;
      $Data::Dmp::OPT_STRINGIFY_NUMBERS = 1;
      if (ref $case->{expected} ne 'HASH') {
          sprintf(<<~'END', dmp($case->{input}{series}), $case->{input}{sliceLength}, map {dmp $_} $case->@{qw<expected description>});
          is(
              slices( %s, %s ),
              %s,
              %s,
          );
          END
      }
      else {
          sprintf(<<~'END', dmp($case->{input}{series}), $case->{input}{sliceLength}, $case->{expected}{error}, dmp($case->{description}));
          like(
              dies( sub { slices %s, %s } ),
              qr/%s/,
              %s,
          );
          END
      }

example: |-
  # Solution by GitHub Copilot
  sub slices ($series, $slice_length) {
      die "slice length cannot be zero"
          if $slice_length == 0;

      die "slice length cannot be negative"
          if $slice_length < 0;

      die "series cannot be empty"
          if length $series == 0;

      die "slice length cannot be greater than series length"
          if $slice_length > length $series;

      my @slices;
      for (my $i = 0; $i <= length($series) - $slice_length; $i++) {
          push @slices, substr($series, $i, $slice_length);
      }

      return \@slices;
  }

stub: |-
  sub slices {
      my ($series, $slice_length) = @_;
      return undef;
  }
