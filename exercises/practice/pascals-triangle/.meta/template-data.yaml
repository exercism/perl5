subs: pascal_rows

properties:
  rows:
    test: |-
      use Data::Dmp;
      my $expected = join( "\n", map { join ' ', @$_ } @{ $case->{expected} } );
      sprintf(<<~'END', $case->{input}{count}, $expected, dmp($case->{description}));
      is(
          pascal_rows(%s),
          <<'TRIANGLE' =~ s/\n$//r,
      %s
      TRIANGLE
          %s,
      );
      END

example: |
  sub pascal_rows ($rows) {
    return '' if !$rows;

    my @result = ( [1] );
    for ( my $n = 0;; $n++ ) {
      return join "\n", map { join ' ', @$_ } @result if @result == $rows;
      push @result, [1, ( map {
        $result[$n]->[$_] + $result[$n]->[$_+1]
      } 0 .. $n-1 ), 1];
    }
  }

stub: |
  sub pascal_rows {
      my ($rows) = @_;
      return undef;
  }
