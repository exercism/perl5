subs: cipher
properties:
  ciphertext:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', map {dmp($_)} $case->{input}{plaintext}, @{$case}{qw<expected description>});
      is(
          cipher(%s),
          %s,
          %s
      );
      END

example: |-
  sub cipher ($text) {

      $text = lc($text);
      $text =~ s/[^a-z0-9]//g;

      my ($cols, $rows) = (1, 0);
      until ($cols * $rows >= length($text)) {
          if ($cols > $rows) {
              $rows++;
          }
          else {
              $cols++;
          }
      }

      $text .= ' ' x ($cols * $rows - length($text));

      my @matrix;
      for (my $i = 0; $i < $cols * $rows; $i += $cols) {
          push @matrix, [split //, substr($text, $i, $cols)];
      }

      my $result = '';
      for my $j (0..$cols - 1) {
          $result .= ' ' if $result;
          for my $k (0..$rows - 1) {
              $result .= $matrix[$k][$j];
          }
      }

      return $result;
  }

stub: |-
  sub cipher ($text) {
      return undef;
  }
