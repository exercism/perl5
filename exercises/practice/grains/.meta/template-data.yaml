subs: grains_on_square total_grains
properties:
  square:
    test: |-
      use Data::Dmp;
      if (ref $case->{expected} eq 'HASH') {
          sprintf(<<'END', $case->{input}{square}, $case->{expected}{error}, dmp($case->{description}));
      like(
          dies( sub { grains_on_square(%s) } ),
          qr/%s/,
          %s,
      );
      END
      }
      else {
          sprintf(<<'END', $case->{input}{square}, $case->{expected}, dmp($case->{description}));
      is(
          grains_on_square(%s),
          %s,
          %s,
      );
      END
      }
  total:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', $case->{expected}, dmp($case->{description}));
      is(
          total_grains(),
          %s,
          %s,
      );
      END

example: |-
  use bignum;
  use List::Util qw(sum);

  sub grains_on_square ($square) {
    if ($square < 1 || $square > 64) {
      die 'square must be between 1 and 64';
    }
    return 2 ** ($square - 1);
  }

  sub total_grains () {
      return sum map {grains_on_square($_)} 1..64;
  }

stub: |-
  sub grains_on_square ($square) {
    return undef;
  }

  sub total_grains () {
      return undef;
  }
