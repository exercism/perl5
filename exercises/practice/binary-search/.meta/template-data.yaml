subs: binary_search
properties:
  find:
    test: |-
      use Data::Dmp;
      if (ref $case->{expected}) {
          sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<array value>}), $case->{expected}{error}, dmp($case->{description}));
      like(
          dies( sub { binary_search( %s, %s ) } ),
          qr/%s/,
          %s,
      );
      END
      }
      else {
          sprintf(<<'END', map {dmp($_)} @{$case->{input}}{qw<array value>}, @{$case}{qw<expected description>});
      is(
          binary_search( %s, %s ),
          %s,
          %s,
      );
      END
      }

example: |-
  sub binary_search ($array, $value, $low = undef, $high = undef) {

    return binary_search($array, $value, 0, scalar(@{$array}) - 1) unless defined $high;

    die 'value not in array' if $low > $high;

    my $mid = int(($low + $high) / 2);
    my $found = $array->[$mid];

    if ($value > $found) {
        return binary_search($array, $value, $mid + 1, $high);
    }
    elsif ($value < $found) {
        return binary_search($array, $value, $low, $mid - 1);
    }
    else {
        return $mid;
    }
  }

stub: |-
  sub binary_search ($array, $value) {
    return undef;
  }
