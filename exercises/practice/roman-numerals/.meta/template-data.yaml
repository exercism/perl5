subs: to_roman

properties:
  roman:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', $case->{input}{number}, map {dmp $_} $case->@{qw<expected description>});
      is(
          to_roman(%s),
          %s,
          %s,
      );
      END

example: |-
  my %ROMANS = qw(
      1000 M
       900 CM
       500 D
       400 CD
       100 C
        90 XC
        50 L
        40 XL
        10 X
         9 IX
         5 V
         4 IV
         1 I
  );

  sub to_roman ($number) {
      my $roman;
      my @places = sort {$b <=> $a} keys %ROMANS;

      use integer;

      while ( $number > 0 ) {
          my $key    = shift @places;
          my $repeat = $number / $key;
          $number    -= $key * $repeat;
          $roman     .= $ROMANS{$key} x $repeat;
      }

      return $roman;
  }

stub: |-
  sub to_roman ($number) {
      return undef;
  }
