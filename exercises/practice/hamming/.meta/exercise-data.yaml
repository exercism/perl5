subs: hamming_distance

properties:
  distance:
    test: |-
      use Data::Dmp;
      if (!ref $case->{expected}) {
          sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<strand1 strand2>}), $case->{expected}, dmp($case->{description}));
      is(
          hamming_distance( %s, %s ),
          %s,
          %s,
      );
      END
      }
      else {
          sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<strand1 strand2>}), $case->{expected}{error}, dmp($case->{description}));
      like(
          dies( sub { hamming_distance( %s, %s ) } ),
          qr/%s/,
          %s,
      );
      END
      }

example: |-
  sub hamming_distance {
    my ($strand1, $strand2) = @_;
    if ( length $strand1 != length $strand2 ) {
      die 'left and right strands must be of equal length';
    }
    return scalar grep { [split //, $strand1]->[$_] ne [split //, $strand2]->[$_] } 0..length($strand1) - 1;
  }

stub: |-
  sub hamming_distance {
    my ($strand1, $strand2) = @_;
    return undef;
  }
