class: true

# Tests: inline here, since there is no canonical-data.json for this exercise
tests: |-
  my $robot = RobotName->new; # begin: 1
  isa_ok $robot, 'RobotName'; # end: 1

  my $name = $robot->name; # begin: 2
  my $schema = qr/^[A-Z]{2}[0-9]{3}$/;
  like $robot->name, $schema, 'Name should match schema'; # end: 2

  is $name, $robot->name, 'Name should be persistent'; # case: 3

  isnt $robot->name, RobotName->new->name, 'Robots should have different names'; # case: 4

  isnt $robot->reset_name, $name, 'reset_name should change the robot name'; # case: 5

  like $robot->name, $schema, 'New name should match schema'; # case: 6

example: |-
  field $name :reader;
  
  ADJUST {
      $name = $self->reset_name();
  }

  method reset_name () {
      $name = _rand_letter() . _rand_letter() . _suffix();
      return $name;
  }

  sub _rand_letter () {
      my @letters = 'A' .. 'Z';
      return $letters[ int rand $#letters ];
  }

  sub _suffix () {
      return sprintf('%03d', int rand 1000);
  }

stub: |-
  field $name :reader;

  method reset_name () {
      return undef;
  }
