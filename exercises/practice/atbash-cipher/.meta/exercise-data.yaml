subs: encode_atbash decode_atbash
properties:
  encode:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', map {dmp($_)} $case->{input}{phrase}, @{$case}{qw<expected description>} );
      is(
          encode_atbash(%s),
          %s,
          %s,
      );
      END
  decode:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', map {dmp($_)} $case->{input}{phrase}, @{$case}{qw<expected description>} );
      is(
          decode_atbash(%s),
          %s,
          %s,
      );
      END

example: |-
  use List::Util qw<pairvalues>;

  my %dict;
  @dict{'a'..'z'} = reverse('a'..'z');

  sub encode_atbash {
    join( ' ', pairvalues split( /(\w{1,5})/, decode_atbash(@_) ) );
  }

  sub decode_atbash {
    join '', map { /\d/ ? $_ : $dict{$_} } split( //, lc $_[0] =~ s/\W//gr );
  }

stub: |-
  sub encode_atbash {
    my ($phrase) = @_;
    return undef;
  }

  sub decode_atbash {
    my ($phrase) = @_;
    return undef;
  }
