methods: is_empty contains is_subset_of is_disjoint_of is_equal_to add intersection difference union
moo: true
tests: |
  my ($set1, $set2);
properties:
  empty:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      is(
          $set1->is_empty,
          %s,
          %s,
      );
      END
  contains:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{input}{element}, $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      is(
          $set1->contains(%s),
          %s,
          %s,
      );
      END
  subset:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_subset_of($set2),
          %s,
          %s,
      );
      END
  disjoint:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_disjoint_of($set2),
          %s,
          %s,
      );
      END
  equal:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_equal_to($set2),
          %s,
          %s,
      );
      END
  add:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{input}{element}, dmp($case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s)->add(%s);
      is(
          $set1->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  intersection:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->intersection($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  difference:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->difference($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  union:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}, $case->{description});
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->union($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END

example: |-
  use Types::Common qw<-types>;
  use namespace::clean;

  has elements => (
      is => 'ro',
      isa => (HashRef[Bool])->plus_coercions(
          ArrayRef, sub { +{ map { $_ => 1 } @{$_[0]} } },
      ),
      coerce => 1,
  );

  sub _keys {
      keys %{ $_[0]->elements };
  }

  sub is_empty {
      !$_[0]->_keys;
  }

  sub contains {
      my ($self, $element) = @_;
      return !!$self->elements->{$element};
  }

  sub is_subset_of {
      my ($self, $other) = @_;
      for my $key ($self->_keys) {
          return 0 unless $other->contains($key);
      }
      return 1;
  }

  sub is_disjoint_of {
      my ($self, $other) = @_;
      for my $key ($self->_keys) {
          return 0 if $other->contains($key);
      }
      return 1;
  }

  sub is_equal_to {
      my ($self, $other) = @_;
      return 0 if $self->_keys != $other->_keys;
      for my $key ($self->_keys) {
          return 0 unless $other->contains($key);
      }
      return 1;
  }

  sub add {
      my ($self, $element) = @_;
      return __PACKAGE__->new(elements => [$self->_keys, $element]);
  }

  sub intersection {
      my ($self, $other) = @_;
      return __PACKAGE__->new(elements => [ grep { $self->contains($_) && $other->contains($_) } $self->_keys, $other->_keys ]);
  }

  sub difference {
      my ($self, $other) = @_;
      return __PACKAGE__->new(elements => [ grep { $self->contains($_) && !$other->contains($_) } $self->_keys , $other->_keys ]);
  }

  sub union {
      my ($self, $other) = @_;
      return __PACKAGE__->new(elements => [ $self->_keys, $other->_keys ]);
  }

stub: |-
  has elements => (
      is => 'ro',
      #coerce => sub {...},
      # If you wish, one way of normalizing your objects
      # e.g. making (elements => [1, 2, 3]) and (elements => [3, 2, 1]) identical
      # would be to use the 'coerce' option: https://metacpan.org/pod/Moo#coerce
  );

  sub is_empty {
      my ($self) = @_;
      return undef;
  }

  sub contains {
      my ($self, $element) = @_;
      return undef;
  }

  sub is_subset_of {
      my ($self, $other) = @_;
      return undef;
  }

  sub is_disjoint_of {
      my ($self, $other) = @_;
      return undef;
  }

  sub is_equal_to {
      my ($self, $other) = @_;
      return undef;
  }

  sub add {
      my ($self, $element) = @_;
      return undef;
  }

  sub intersection {
      my ($self, $other) = @_;
      return undef;
  }

  sub difference {
      my ($self, $other) = @_;
      return undef;
  }

  sub union {
      my ($self, $other) = @_;
      return undef;
  }
