class: true
tests: |
  my ($set1, $set2);
properties:
  empty:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      is(
          $set1->is_empty,
          %s,
          %s,
      );
      END
  contains:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{input}{element}, $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      is(
          $set1->contains(%s),
          %s,
          %s,
      );
      END
  subset:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_subset_of($set2),
          %s,
          %s,
      );
      END
  disjoint:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_disjoint_of($set2),
          %s,
          %s,
      );
      END
  equal:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->is_equal_to($set2),
          %s,
          %s,
      );
      END
  add:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', dmp($case->{input}{set}), $case->{input}{element}, dmp($case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s)->add(%s);
      is(
          $set1->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  intersection:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->intersection($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  difference:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}), dmp($case->{description}));
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->difference($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END
  union:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', map {dmp($_)} @{$case->{input}}{qw<set1 set2>}, $case->{expected}, $case->{description});
      $set1 = CustomSet->new(elements => %s);
      $set2 = CustomSet->new(elements => %s);
      is(
          $set1->union($set2)->is_equal_to(CustomSet->new(elements => %s)),
          T,
          %s,
      );
      END

example: |-
  field $elements :param = [];
  field $set :reader(elements) = {};
  
  ADJUST {
      $set = { map { $_ => 1 } $elements->@* }
  }

  method _keys () {
      keys %{ $self->elements };
  }

  method is_empty () {
      !$self->_keys;
  }

  method contains ($element) {
      return !!$self->elements->{$element};
  }

  method is_subset_of ($other) {
      for my $key ($self->_keys) {
          return 0 unless $other->contains($key);
      }
      return 1;
  }

  method is_disjoint_of ($other) {
      for my $key ($self->_keys) {
          return 0 if $other->contains($key);
      }
      return 1;
  }

  method is_equal_to ($other) {
      return 0 if $self->_keys != $other->_keys;
      for my $key ($self->_keys) {
          return 0 unless $other->contains($key);
      }
      return 1;
  }

  method add ($element) {
      return __CLASS__->new(elements => [$self->_keys, $element]);
  }

  method intersection ($other) {
      return __CLASS__->new(
        elements => [
          grep { $self->contains($_) && $other->contains($_) } $self->_keys, $other->_keys
        ]
      );
  }

  method difference ($other) {
      return __CLASS__->new(
        elements => [
          grep { $self->contains($_) && !$other->contains($_) } $self->_keys , $other->_keys
        ]
      );
  }

  method union ($other) {
      return __CLASS__->new(elements => [ $self->_keys, $other->_keys ]);
  }

stub: |-
  field $elements :reader :param;

  method is_empty () {
      return undef;
  }

  method contains ($element) {
      return undef;
  }

  method is_subset_of ($other) {
      return undef;
  }

  method is_disjoint_of ($other) {
      return undef;
  }

  method is_equal_to ($other) {
      return undef;
  }

  method add ($element) {
      return undef;
  }

  method intersection ($other) {
      return undef;
  }

  method difference ($other) {
      return undef;
  }

  method union ($other) {
      return undef;
  }
