subs: keep discard
modules:
  - use: experimental qw<signatures>;
  - use: List::Util qw<any>;

properties:
  keep:
    test: |-
      use Data::Dmp;
      my $func = '';
      if ($case->{input}{predicate} eq 'fn(x) -> true') {
          $func = 'sub ($x) { 1 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> false') {
          $func = 'sub ($x) { 0 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> x % 2 == 1') {
          $func = 'sub ($x) { $x % 2 == 1 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> x % 2 == 0') {
          $func = 'sub ($x) { $x % 2 == 0 }';
      }
      elsif ($case->{input}{predicate} eq "fn(x) -> starts_with(x, 'z')") {
          $func = q|sub ($x) { substr($x, 0, 1) eq 'z' }|;
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> contains(x, 5)' ) {
          $func = 'sub ($x) { any { $_ == 5 } @{$x} }';
      }

      sprintf(<<~'END', dmp($case->{input}{list}), $func, dmp($case->{expected}), dmp($case->{description}));
      is(
          keep(
            %s,
            %s,
          ),
          %s,
          %s,
      );
      END

  discard:
    test: |-
      use Data::Dmp;
      my $func = '';
      if ($case->{input}{predicate} eq 'fn(x) -> true') {
          $func = 'sub ($x) { 1 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> false') {
          $func = 'sub ($x) { 0 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> x % 2 == 1') {
          $func = 'sub ($x) { $x % 2 == 1 }';
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> x % 2 == 0') {
          $func = 'sub ($x) { $x % 2 == 0 }';
      }
      elsif ($case->{input}{predicate} eq "fn(x) -> starts_with(x, 'z')") {
          $func = q|sub ($x) { substr($x, 0, 1) eq 'z' }|;
      }
      elsif ($case->{input}{predicate} eq 'fn(x) -> contains(x, 5)' ) {
          $func = 'sub ($x) { any { $_ == 5 } @{$x} }';
      }

      sprintf(<<~'END', dmp($case->{input}{list}), $func, dmp($case->{expected}), dmp($case->{description}));
      is(
          discard(
            %s,
            %s,
          ),
          %s,
          %s,
      );
      END

example: |-
  sub keep    { [ _filter( @_, 1 ) ] }
  sub discard { [ _filter( @_, 0 ) ] }

  sub _filter ( $list, $function, $is_keeping ) {

    die "ArgumentError: 2nd parameter must be a function reference"
      unless ref $function eq 'CODE';

    my @result;

    foreach my $element (@$list) {
      if ($is_keeping) {
        push @result, $element if $function->($element);
        next;
      }

      # discard
      push @result, $element unless $function->($element);
    }

    return @result;
  }

stub: |-
  sub keep ($input, $function) {
    return undef;
  }

  sub discard ($input, $function) {
    return undef;
  }
