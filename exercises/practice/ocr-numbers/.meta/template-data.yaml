package: OCRNumbers
subs: convert_ocr

properties:
  convert:
    test: |-
      use Data::Dmp;
      if (!ref $case->{expected}) {
          sprintf(<<'END', join("\n", @{$case->{input}{rows}}), map {dmp($_)} @{$case}{qw<expected description>});
      is(
          convert_ocr(<<'OCR' =~ s/\n\z//r),
      %s
      OCR
          %s,
          %s,
      );
      END
      }
      else {
          sprintf(<<'END', join("\n", @{$case->{input}{rows}}), $case->{expected}{error}, dmp($case->{description}));
      like(
          dies( sub { convert_ocr(<<'OCR' =~ s/\n\z//r) } ),
      %s
      OCR
          qr/%s/,
          %s,
      );
      END
      }


example: |-
  sub convert_ocr ($input) {

      my %digits = (
          ' _ | ||_|   ' => 0,
          '     |  |   ' => 1,
          ' _  _||_    ' => 2,
          ' _  _| _|   ' => 3,
          '   |_|  |   ' => 4,
          ' _ |_  _|   ' => 5,
          ' _ |_ |_|   ' => 6,
          ' _   |  |   ' => 7,
          ' _ |_||_|   ' => 8,
          ' _ |_| _|   ' => 9,
      );

      my @lines = split /\n/, $input;
      die "Number of input lines is not a multiple of four" if @lines % 4;
      my $width = length $lines[0];
      die "Number of input columns is not a multiple of three" if $width % 3;

      my @chars;
      for (my $i = 0; $i < @lines; $i += 4) {
          push @chars, ',' if $i;
          for (my $j = 0; $j < $width; $j += 3) {
              my $char = '';
              for (my $k = 0; $k < 4; $k++) {
                  $char .= substr($lines[$i + $k], $j, 3);
              }
              push @chars, $digits{$char} // '?';
          }
      }

      return join '', @chars;
  }

stub: |-
  sub convert_ocr ($string) {
      return undef;
  }
