subs: find_primes
  
properties:
  primes:
    test: |-
      use Data::Dmp;
      my $expected = $case->{input}{limit} == 1000
          ? "array {\n" . ( join '', map { 'item ' . dmp($_) . ";\n" } $case->{expected}->@* ) . "end;\n}"
          : dmp($case->{expected});
      sprintf(<<~'END', $case->{input}{limit}, $expected, dmp($case->{description}));
      is(
          find_primes(%s),
          %s,
          %s,
      );
      END

example: |-
  # Solved by GitHub Copilot
  sub find_primes ($n) {
      my @primes = (1) x ($n + 1);
      $primes[0] = $primes[1] = 0;

      for my $i (2 .. int(sqrt($n))) {
          next unless $primes[$i];
          for (my $j = $i**2; $j <= $n; $j += $i) {
              $primes[$j] = 0;
          }
      }

      return [ grep { $primes[$_] } 2 .. $n ];
  }

stub: |-
  sub find_primes {
      my ($limit) = @_;
      return undef;
  }
