package: ETL
subs: transform

properties:
  transform:
    test: |-
      use Data::Dmp;
      use List::Util qw<pairs>;
      my $input    = dmp($case->{input}{legacy}) =~ s/({|(?:],))/$1\n/gr =~ s/}/\n}/gr;
      my $expected = "hash {\n" . ( join '', map { "field $_->[0] => $_->[1];\n" } sort {$a->[0] cmp $b->[0]} pairs $case->{expected}->%* ) . "end;\n}";
      sprintf(<<'END', $input, $expected, dmp($case->{description}));
      is(
          transform(
              %s
          ),
          %s,
          %s,
      );
      END

example: |-
  sub transform {
    my ($data) = @_;
    return {
      map {
        my $val = $_;
        map { lc($_) => $val } @{ $data->{$_} }
      } keys %{$data}
    };
  }

stub: |-
  sub transform {
    my ($data) = @_;
    return undef;
  }
