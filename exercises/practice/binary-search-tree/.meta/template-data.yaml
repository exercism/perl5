tests: |
  my $bst;
  my $init;
properties:
  sortedData:
    test: |-
      use Data::Dmp;
      sprintf(<<'END', join(', ', @{$case->{input}{treeData}}), map {dmp($_)} @{$case}{qw<expected description>});
      $init = 1;
      for my $data (%s) {
          if ($init) {
            $bst = BinarySearchTree->new( root => BinarySearchTree::Node->new( data => $data ) );
              $init = 0;
              next;
          }
          $bst->add($data);
      }
      is(
          $bst->sort,
          %s,
          %s,
      );
      END

moo: 1
example: |-
  package BinarySearchTree::Node {
      use Moo;

      has data => (
          is => 'ro',
      );
      has [qw<left right>] => (
          is => 'rw',
      );

      sub set {
          my ($self, $data) = @_;
          if ($data > $self->data) {
              if ($self->right) {
                  $self->right->set($data);
              }
              else {
                  $self->right(BinarySearchTree::Node->new(data => $data));
              }
          }
          elsif ($self->left) {
              $self->left->set($data);
          }
          else {
              $self->left(BinarySearchTree::Node->new(data => $data));
          }
      }
  };

  has root => (
      is => 'rw',
  );

  sub add {
      my ($self, $data) = @_;
      $self->root->set($data);
  }

  sub sort {
      my ($self) = @_;
      my @sorted;
      my $sub;
      $sub = sub {
          my ($node) = @_;
          if ($node->left) {
              $sub->($node->left);
          }

          push @sorted, $node->data;

          if ($node->right) {
              $sub->($node->right);
          }
      };
      $sub->($self->root);
      return [@sorted];
  }

stub: |-
  package BinarySearchTree::Node {
      use Moo;

      has data => (
        is => 'ro',
      );
      has [qw<left right>] => (
        is => 'rw',
      );
  };

  has root => (
      is => 'rw',
  );

  sub add {
      my ($self) = @_;
      # $self->root contains the initial node.
  }

  sub sort {
      my ($self) = @_;
      return [];
  }
