tests: |
  my $bst;
properties:
  sortedData:
    test: |-
      use Data::Dmp;
      my @tree_data = @{$case->{input}{treeData}};
      sprintf(<<'END', $tree_data[0], join('', map {"\n\$bst->add($_);"}  @tree_data[1..$#tree_data]), map {dmp($_)} @{$case}{qw<expected description>});
      $bst = BinarySearchTree->new( root => BinarySearchTree::Node->new( data => %d ) );%s
      is(
          $bst->sort,
          %s,
          %s,
      );
      END

class: true
example: |-
  field $root :param;

  method add ($data) {
      $root->set($data);
  }

  method sort () {
      my @sorted;
      my $sub;
      $sub = sub {
          my ($node) = @_;
          if ($node->left) {
              $sub->($node->left);
          }

          push @sorted, $node->data;

          if ($node->right) {
              $sub->($node->right);
          }
      };
      $sub->($root);
      return [@sorted];
  }

  class BinarySearchTree::Node {
      field $data  :reader :param;
      field $left  :reader;
      field $right :reader;

      method set ($new_data) {
          if ($new_data > $data) {
              if ($right) {
                  $right->set($new_data);
              }
              else {
                  $right = BinarySearchTree::Node->new(data => $new_data);
              }
          }
          elsif ($left) {
              $left->set($new_data);
          }
          else {
              $left = BinarySearchTree::Node->new(data => $new_data);
          }
      }
  }


stub: |-
  field $root :param;

  method add () {
      # $root contains the initial node.
  }

  method sort () {
      return [];
  }

  class BinarySearchTree::Node {
      field $data  :reader :param;
      field $left  :reader;
      field $right :reader;
  }
