subs: rebase
tests: |-
  for my $case (@test_cases) {
    if ( ref $case->{expected} ne 'HASH' ) {
      is(
        rebase($case->{input}),
        $case->{expected},
        $case->{description},
      );
    }
    else {
      like dies( sub { rebase($case->{input}) } ),
      qr/$case->{expected}{error}/, $case->{description};
    }
  }

example: |-
  my @errors = (
    'input base must be >= 2',
    'output base must be >= 2',
    'all digits must satisfy 0 <= d < input base',
  );

  sub rebase {
    my ($input) = @_;

    if ( $input->{inputBase} < 2 ) {
      die $errors[0];
    }
    if ( $input->{outputBase} < 2 ) {
      die $errors[1];
    }
    for my $digit ( @{ $input->{digits} } ) {
      if ( $digit < 0 || $digit >= $input->{inputBase} ) {
        die $errors[2];
      }
    }

    return from_decimal( $input->{outputBase},
      to_decimal( $input->{inputBase}, $input->{digits} ) );
  }

  sub to_decimal {
    my ( $base, $digits ) = @_;
    my $elems = @{$digits};
    for ( @{$digits} ) {
      if ( $_ == 0 ) {
        $elems--;
      }
      else {
        last;
      }
    }

    my $sum = 0;
    for ( my $i = 0; $i < $elems; $i++ ) {
      $sum += $digits->[ -$i - 1 ] * $base**$i;
    }

    return $sum;
  }

  sub from_decimal {
    my ( $base, $number ) = @_;
    my @digits;
    while ( $number >= $base ) {
      unshift @digits, $number % $base;
      $number = int( $number / $base );
    }
    unshift @digits, $number;
    return [@digits];
  }

stub: |-
  my @errors = (
    'input base must be >= 2',
    'output base must be >= 2',
    'all digits must satisfy 0 <= d < input base',
  );

  sub rebase {
    my ($input) = @_;
    return undef;
  }
