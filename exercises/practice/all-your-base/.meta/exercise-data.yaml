subs: rebase
properties:
  rebase:
    test: |-
      use Data::Dmp;
      if (ref $case->{expected} ne 'HASH') {
          sprintf(<<'END', map {dmp($_)} @{$case->{input}}{qw<digits inputBase outputBase>}, @{$case}{qw<expected description>});
      is(
          rebase( %s, %s, %s ),
          %s,
          %s,
      );
      END
      }
      else {
          sprintf(<<'END', (map {dmp($_)} @{$case->{input}}{qw<digits inputBase outputBase>}), $case->{expected}{error}, dmp($case->{description}));
      like(
          dies( sub { rebase( %s, %s, %s ) } ),
          qr/%s/,
          %s,
      );
      END
      }

example: |-
  my @errors = (
    'input base must be >= 2',
    'output base must be >= 2',
    'all digits must satisfy 0 <= d < input base',
  );

  sub rebase {
    my ($digits, $input_base, $output_base) = @_;

    if ( $input_base < 2 ) {
      die $errors[0];
    }
    if ( $output_base < 2 ) {
      die $errors[1];
    }
    for my $digit ( @{$digits} ) {
      if ( $digit < 0 || $digit >= $input_base ) {
        die $errors[2];
      }
    }

    return from_decimal( $output_base,
      to_decimal( $input_base, $digits ) );
  }

  sub to_decimal {
    my ( $base, $digits ) = @_;
    my $elems = @{$digits};
    for ( @{$digits} ) {
      if ( $_ == 0 ) {
        $elems--;
      }
      else {
        last;
      }
    }

    my $sum = 0;
    for ( my $i = 0; $i < $elems; $i++ ) {
      $sum += $digits->[ -$i - 1 ] * $base**$i;
    }

    return $sum;
  }

  sub from_decimal {
    my ( $base, $number ) = @_;
    my @digits;
    while ( $number >= $base ) {
      unshift @digits, $number % $base;
      $number = int( $number / $base );
    }
    unshift @digits, $number;
    return [@digits];
  }

stub: |-
  my @errors = (
    'input base must be >= 2',
    'output base must be >= 2',
    'all digits must satisfy 0 <= d < input base',
  );

  sub rebase {
    my ($digits, $input_base, $output_base) = @_;
    return undef;
  }
