subs: accumulate
modules:
  - use: experimental qw<signatures>;
properties:
  accumulate:
    test: |-
      use Data::Dmp;
      my $func;
      if ( $case->{input}{accumulator} eq '(x) => x * x' ) {
          $func = 'sub ($x) { $x * $x }';
      }
      elsif ( $case->{input}{accumulator} eq '(x) => upcase(x)' ) {
          $func = 'sub ($x) { uc $x }';
      }
      elsif ( $case->{input}{accumulator} eq '(x) => reverse(x)' ) {
         $func = 'sub ($x) { scalar reverse $x }';
      }
      elsif (
          $case->{input}{accumulator} eq '(x) => accumulate(["1", "2", "3"], (y) => x + y)' )
      {
          $func = 'sub ($x) {
              accumulate( [ 1 .. 3 ], sub ($y) { $x . $y } )
          }';
      }

      sprintf(<<'END', dmp($case->{input}{list}), $func, dmp($case->{expected}), dmp($case->{description}));
      is(
          accumulate( %s, %s ),
          %s,
          %s,
      );
      END

example: |-
  sub accumulate {
    my ( $list, $func ) = @_;
    my @results;

    for ( @{ $list } ) {
       push @results, $func->($_);
    }

    return \@results;
  }

stub: |-
  sub accumulate {
    my ( $list, $func ) = @_;
    return undef;
  }
