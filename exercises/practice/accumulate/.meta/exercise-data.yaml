plan: 6
modules:
  - use: experimental qw<signatures>;
subs: accumulate
tests: |-
   for my $case (@test_cases) {
     my $func = sub {die};
     for ( $case->{input}{accumulator} ) {
       if ( $_ eq '(x) => x * x' ) {
         $func = sub ($x) { $x * $x };
       }
       elsif ( $_ eq '(x) => upcase(x)' ) {
         $func = sub ($x) { uc $x };
       }
       elsif ( $_ eq '(x) => reverse(x)' ) {
         $func = sub ($x) { scalar reverse $x };
       }
       elsif (
         $_ eq '(x) => accumulate(["1", "2", "3"], (y) => x + y))' )
       {
         $func = sub ($x) {
           accumulate( [ 1 .. 3 ], sub ($y) { $x . $y } )
         };
       }
     }

     is(
       accumulate( $case->{input}{list}, $func ),
       $case->{expected},
       $case->{description}
     );
   }

example: |-
  sub accumulate {
    my ( $list, $func ) = @_;
    my @results;

    for ( @{ $list } ) {
       push @results, $func->($_);
    }

    return \@results;
  }

stub: |-
  sub accumulate {
    my ( $list, $func ) = @_;
    return undef;
  }
