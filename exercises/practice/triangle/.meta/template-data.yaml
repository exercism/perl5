subs: is_equilateral is_isosceles is_scalene

properties:
  equilateral:
    test: |-
      use Data::Dmp;
      sprintf(<<~'END', dmp($case->{input}{sides}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      is(
          is_equilateral(%s),
          %s,
          %s,
      );
      END

  isosceles:
    test: |-
      use Data::Dmp;
      sprintf(<<~'END', dmp($case->{input}{sides}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      is(
          is_isosceles(%s),
          %s,
          %s,
      );
      END

  scalene:
    test: |-
      use Data::Dmp;
      sprintf(<<~'END', dmp($case->{input}{sides}), $case->{expected} ? 'T' : 'DF', dmp($case->{description}));
      is(
          is_scalene(%s),
          %s,
          %s,
      );
      END

example: |-
  # Solution by GitHub Copilot
  sub is_equilateral ($sides) {
      my $first_side = $sides->[0];
      for my $side (@$sides) {
          return 0 if $side == 0;
          return 0 if $side != $first_side;
      }
      return 1;
  }

  sub is_isosceles ($sides) {
      my ($first_side, $second_side, $third_side) = sort { $a <=> $b } @$sides;
      return 0 if $first_side + $second_side <= $third_side;
      return 1 if $first_side == $second_side || $second_side == $third_side;
      return 0;
  }

  sub is_scalene ($sides) {
      my ($first_side, $second_side, $third_side) = sort { $a <=> $b } @$sides;
      return 0 if $first_side + $second_side <= $third_side;
      return 1 if $first_side != $second_side && $second_side != $third_side;
      return 0;
  }

stub: |-
  sub is_equilateral {
    my ($triangle) = @_;
    return undef;
  }

  sub is_isosceles {
    my ($triangle) = @_;
    return undef;
  }

  sub is_scalene {
    my ($triangle) = @_;
    return undef;
  }
