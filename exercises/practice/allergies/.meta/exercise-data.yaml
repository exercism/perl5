plan: 50
subs: allergic_to list_allergies
properties:
  allergicTo:
    test: |-
      use Data::Dump qw<quote>;
      sprintf(<<'END', quote($case->{input}{item}), $case->{input}{score}, $case->{expected} ? ('T', '# True') : ('DF', '# Defined but False'), quote($case->{description}));
      is(
          allergic_to(%s, %s),
          %s, %s
          %s,
      );
      END
  list:
    test: |-
      use Data::Dump qw<quote>;
      sprintf(<<'END', $case->{input}{score}, 'bag {' . (join '', map {'item ' . quote($_) . ';'} @{$case->{expected}}) . 'end;}', quote($case->{description}));
      is(
          list_allergies(%s),
          %s,
          %s,
      );
      END



example: |-
  use constant ALLERGENS => {
    eggs         => 1,
    peanuts      => 2,
    shellfish    => 4,
    strawberries => 8,
    tomatoes     => 16,
    chocolate    => 32,
    pollen       => 64,
    cats         => 128,
  };

  sub allergic_to {
    my ($item, $score) = @_;
    ALLERGENS->{ $item } & $score;
  }

  sub list_allergies {
    my ($score) = @_;
    return [ grep { allergic_to $_, $score }
        keys %{ +ALLERGENS } ];
  }

stub: |-
  sub allergic_to {
    my ($item, $score) = @_;
    return undef;
  }

  sub list_allergies {
    my ($score) = @_;
    return undef;
  }
