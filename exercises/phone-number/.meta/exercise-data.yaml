exercise: PhoneNumber
plan: 19
subs: clean_number
tests: |-
  my @cases  = (
    map { [ $_->{input}{phrase}, $_->{expected}, $_->{description} ] }
    map {@$_}
    map { $_->{cases} } @{ $C_DATA->{cases} }
  );

  for (@cases) {
    my ( $input, $expected, $desc ) = @$_;
    $desc .= " - $input";

    if ( !ref $expected ) {
      is clean_number($input), $expected, $desc
    }
    else {
      like dies( sub { clean_number($input) } ),
      qr/$expected->{error}/, $desc;
    }
  }

example: |
  sub clean_number {
    my ($number) = @_;
    $number =~ s/[()-. ]//g;
    if ($number =~ /^ 1? (\d{10}) $/x) {
      for ([area => substr($1, 0, 1)], [exchange => substr($1, 3, 1)]) {
        die $_->[0] . ' code cannot start with ' . ($_->[1] ? 'one' : 'zero') if $_->[1] < 2;
      }
    }
    else {
      die 'more than 11 digits'        if length $number > 11;
      die 'incorrect number of digits' if length $number < 10;
      die 'letters not permitted'      if $number =~ /[a-z]/i;
      die 'punctuations not permitted' if $number =~ /\W/;
      die '11 digits must start with 1';
    }
    return $1;
  }

stub: |
  sub clean_number {
    my ($number) = @_;
    return undef;
  }
