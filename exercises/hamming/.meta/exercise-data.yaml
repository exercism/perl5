exercise: Hamming
plan: 8
subs: hamming_distance

tests: |-
  my @exception_cases;

  foreach my $case (@{$C_DATA->{cases}}) {
    if (ref $case->{expected} eq 'HASH' && exists $case->{expected}{error}) {
      push @exception_cases, $case;
    }
    else {
      is hamming_distance(@{$case->{input}}{qw(strand1 strand2)}), $case->{expected}, $case->{description};
    }
  }

  SKIP: {
    if (eval { require Test2::Tools::Exception }) {
      eval q{
        use Test2::Tools::Exception qw(dies);
        ok(dies { hamming_distance @{$_->{input}}{qw(strand1 strand2)} }, $_->{description}) foreach @exception_cases;
        1;
      } or warn $@;
    }
    else {
      skip 'Test2::Tools::Exception not loaded', scalar @exception_cases;
    }
  }

example: |-
  sub hamming_distance {
    my ($strand1, $strand2) = @_;
    die if length $strand1 != length $strand2;
    return scalar grep { [split //, $strand1]->[$_] ne [split //, $strand2]->[$_] } 0..length($strand1) - 1;
  }

stub: |-
  sub hamming_distance {
    my ($strand1, $strand2) = @_;
    return undef;
  }
