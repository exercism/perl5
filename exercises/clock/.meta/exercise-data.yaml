exercise: Clock
plan: 4
methods: new time add_minutes subtract_minutes
modules:
  - use: List::Util qw(any)
tests: |-
  subtest create => sub {
    plan 20;
    for my $case ( grep { $_->{property} eq 'create' } @test_cases ) {
      is(
        Clock->new( $case->{input} ),
        object {
          prop blessed => 'Clock';
          call time    => $case->{expected};
        },
        $case->{description}
      );
    }
  };

  subtest 'add/subtract' => sub {
    plan 16;
    for my $case (
      grep {
        my $prop = $_->{property};
        any { $prop eq $_ } qw< add subtract >;
      } @test_cases
      )
    {
      is(
        Clock->new(
          { hour   => $case->{input}{hour},
            minute => $case->{input}{minute},
          }
        ),

        # Check that the add/subtract_minutes methods
        # return a Clock object with the correct time
        object {
          call [ $case->{property} . '_minutes',
            $case->{input}{value} ] => object {
            prop blessed => 'Clock';
            call time    => $case->{expected};
            };
        },
        $case->{description}
      );
    }
  };

  subtest equal => sub {
    plan 16;
    for my $case ( grep { $_->{property} eq 'equal' } @test_cases ) {
      my ( $clock1, $clock2 )
        = ( map { Clock->new($_) }
          @{ $case->{input} }{qw<clock1 clock2>} );
      if ( $case->{expected} ) {
        is $clock1, $clock2, $case->{description};
      }
      else {
        isnt $clock1, $clock2, $case->{description};
      }
    }
  };

moo: true

stub: |-
  # rwp = read-write protected
  has hour   => ( is => 'rwp' );
  has minute => ( is => 'rwp' );

  sub time {
    my ($self) = @_;
    return undef;
  }

  sub add_minutes {
    my ($self, $amount) = @_;
    return undef;
  }

  sub subtract_minutes {
    my ($self, $amount) = @_;
    return undef;
  }

example: |-
  use POSIX ();

  has [qw(hour minute)] => (
    is => 'rwp',
    default => 0,
  );

  sub time {
    my ($self) = @_;
    return sprintf '%02d:%02d', $self->hour, $self->minute;
  }

  sub add_minutes {
    my ($self, $amount) = @_;
    $self->_set_minute($self->minute + $amount);
    return $self->BUILD;
  }

  sub subtract_minutes {
    my ($self, $amount) = @_;
    return $self->add_minutes(-$amount);
  }

  sub BUILD {
    my ($self) = @_;
    $self->_set_hour( ( $self->hour + POSIX::floor($self->minute / 60) ) % 24 );
    $self->_set_minute( $self->minute % 60 );
    return $self;
  }
